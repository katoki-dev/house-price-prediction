{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f1_ezi67A_Ya",
        "outputId": "37473939-2bc3-4503-9e4d-e2b62910ebba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (5.24.1)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.11/dist-packages (2.1.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.3)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly) (9.1.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.21.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ],
      "source": [
        "pip install pandas numpy scikit-learn matplotlib seaborn plotly xgboost"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ugkXvWgwBbrY"
      },
      "source": [
        "# Step 1: Setup and Imports\n",
        "Import required libraries for data processing, modeling, and visualization. Suppress warnings for cleaner output and enable inline plotting."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "j1zlL04hBQtt"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import plotly.express as px\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DVmP7L6GBn__"
      },
      "source": [
        "# Step 2: Load the Dataset\n",
        "Load `train.csv` and `test.csv` from the Kaggle House Prices dataset. Combine them for preprocessing, excluding `SalePrice` from the training set."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OZJZHChOBalJ",
        "outputId": "f929fd43-98d2-4c73-fb24-99f8e6d55d47"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training data shape: (1460, 81)\n",
            "Test data shape: (1459, 80)\n",
            "Combined data shape: (2919, 80)\n"
          ]
        }
      ],
      "source": [
        "# Load datasets\n",
        "train_data = pd.read_csv('train.csv')  # Update path if needed\n",
        "test_data = pd.read_csv('test.csv')    # Update path if needed\n",
        "\n",
        "# Combine train and test for preprocessing\n",
        "all_data = pd.concat([train_data.drop('SalePrice', axis=1), test_data], axis=0, ignore_index=True)\n",
        "y_train = train_data['SalePrice']\n",
        "#y_test = test_data[]\n",
        "\n",
        "# Display shapes\n",
        "print(\"Training data shape:\", train_data.shape)\n",
        "print(\"Test data shape:\", test_data.shape)\n",
        "print(\"Combined data shape:\", all_data.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pwRgbIAoBsW7"
      },
      "source": [
        "# Step 3: Data Preprocessing\n",
        "Identify numerical and categorical columns. Create pipelines to impute missing values (median for numerical, most frequent for categorical), encode categorical variables with one-hot encoding, and scale numerical features."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "74wRwA7LBsx5"
      },
      "outputs": [],
      "source": [
        "# Identify numerical and categorical columns\n",
        "numerical_cols = all_data.select_dtypes(include=['int64', 'float64']).columns\n",
        "categorical_cols = all_data.select_dtypes(include=['object']).columns\n",
        "\n",
        "# Define preprocessing pipelines\n",
        "numerical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='median')),\n",
        "        ('scaler', StandardScaler())\n",
        "        ])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "            ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "                ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))\n",
        "                ])\n",
        "# Combine transformers\n",
        "preprocessor = ColumnTransformer(\n",
        "                    transformers=[\n",
        "                            ('num', numerical_transformer, numerical_cols),\n",
        "                                    ('cat', categorical_transformer, categorical_cols)\n",
        "                                        ])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jzdPslJkB45l"
      },
      "source": [
        "# Step 4: Feature Engineering\n",
        "Add new features like TotalSF, TotalBath, HouseAge, RemodelAge, and TotalPorchSF to capture complex relationships. Update numerical columns for preprocessing."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "N3jrw21dB8RI"
      },
      "outputs": [],
      "source": [
        "# Add new features\n",
        "def add_features(df):\n",
        "    df = df.copy()\n",
        "    df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\n",
        "    df['TotalBath'] = df['FullBath'] + 0.5 * df['HalfBath']\n",
        "    df['HouseAge'] = df['YrSold'] - df['YearBuilt']\n",
        "    df['RemodelAge'] = df['YrSold'] - df['YearRemodAdd']\n",
        "    df['TotalPorchSF'] = (df['OpenPorchSF'] + df['EnclosedPorch'] + df['3SsnPorch'] + df['ScreenPorch'])\n",
        "    return df\n",
        "\n",
        "\n",
        "all_data = add_features(all_data)\n",
        "\n",
        "# Update numerical columns\n",
        "numerical_cols = numerical_cols.tolist() + ['TotalSF', 'TotalBath', 'HouseAge', 'RemodelAge', 'TotalPorchSF']\n",
        "numerical_cols = [col for col in numerical_cols if col in all_data.columns]\n",
        "\n",
        "# Update preprocessor\n",
        "preprocessor = ColumnTransformer(\n",
        "transformers=[ ('num', numerical_transformer, numerical_cols), ('cat', categorical_transformer, categorical_cols) ])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gz8F5FW3CAKy"
      },
      "source": [
        "# Step 5: Data Visualization\n",
        "Plot the distribution of SalePrice to check skewness and a correlation heatmap for key features to identify relationships, as shown in the paper."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0FdXhwa2CDop",
        "outputId": "2cced1fa-25ec-4ccb-80a1-b3f23feff0a8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1IAAAIjCAYAAAAJLyrXAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAgWVJREFUeJzs3Xd8VfX9x/H3Hbk3e5MFSdh7oyBOEBRwV6yjULdYqz+rtFapdQ+c1FGrbW3FVa1at6IiIDgYslQwrDDCyCCE7H3v9/dHyJXISkKSc2/yej68j+Tesz43N5H7vt/v+RybMcYIAAAAANBodqsLAAAAAIBAQ5ACAAAAgCYiSAEAAABAExGkAAAAAKCJCFIAAAAA0EQEKQAAAABoIoIUAAAAADQRQQoAAAAAmoggBQAAAABNRJACgAB09913y2aztcmxxowZozFjxvjuf/HFF7LZbHrrrbfa5PiXX365unbt2ibHaq7S0lJdffXVSkpKks1m00033dRmx65/Pb744os2O+b+AuH1AYDWQJACAIvNnj1bNpvNdwsODlZKSoomTJigp556SiUlJS1ynF27dunuu+/W6tWrW2R/Lcmfa2uMBx98ULNnz9Z1112nl19+Wb/+9a8PuW51dbWefPJJDRs2TJGRkYqOjtaAAQM0bdo0rVu3rg2rPvjvXu/evXXDDTcoNze3TWsBgEDjtLoAAECde++9V926dVNNTY1ycnL0xRdf6KabbtKsWbP0/vvva/Dgwb51//znP+u2225r0v537dqle+65R127dtXQoUMbvd1nn33WpOM0x+Fq++c//ymv19vqNRyN+fPn67jjjtNdd911xHUnT56sOXPm6JJLLtE111yjmpoarVu3Th9++KGOP/549e3btw0qbqj+d6+yslJfffWVnn32WX388cdas2aNQkNDD7ttILw+ANAaCFIA4CcmTZqkY445xnd/xowZmj9/vs466yydc845ysjIUEhIiCTJ6XTK6Wzd/4WXl5crNDRULperVY9zJEFBQZYevzHy8vLUv3//I6737bff6sMPP9QDDzygP/3pTw2W/fWvf1VhYWErVXh4+//uXX311YqLi9OsWbP03nvv6ZJLLjnoNmVlZQoLCwuI1wcAWgNT+wDAj5166qm64447tG3bNr3yyiu+xw92jtTcuXN14oknKjo6WuHh4erTp4/vzfoXX3yhY489VpJ0xRVX+KZyzZ49W1LdeVADBw7UihUrdPLJJys0NNS37c/Pkarn8Xj0pz/9SUlJSQoLC9M555yj7du3N1ina9euuvzyyw/Ydv99Hqm2g52DU1ZWpt///vdKTU2V2+1Wnz599Nhjj8kY02A9m82mG264Qe+++64GDhwot9utAQMG6JNPPjn4D/xn8vLydNVVVykxMVHBwcEaMmSIXnzxRd/y+vOTtmzZoo8++shX+9atWw+6v8zMTEnSCSeccMAyh8OhuLg43/1t27bpt7/9rfr06aOQkBDFxcXpl7/85SH3/XNLly7VxIkTFRUVpdDQUJ1yyin6+uuvG7XtqaeeKknasmWLpLrXIDw8XJmZmTrjjDMUERGhKVOm+Jb9/PXxer168sknNWjQIAUHB6tTp06aOHGili9f3mC9V155RSNGjFBISIhiY2N18cUXH/A7BAD+iiAFAH6u/nybw02xW7t2rc466yxVVVXp3nvv1eOPP65zzjnH98a5X79+uvfeeyVJ06ZN08svv6yXX35ZJ598sm8fe/bs0aRJkzR06FA98cQTGjt27GHreuCBB/TRRx/p1ltv1Y033qi5c+dq/PjxqqioaNLza0xt+zPG6JxzztFf/vIXTZw4UbNmzVKfPn10yy23aPr06Qes/9VXX+m3v/2tLr74Yj3yyCOqrKzU5MmTtWfPnsPWVVFRoTFjxujll1/WlClT9OijjyoqKkqXX365nnzySV/tL7/8suLj4zV06FBf7Z06dTroPtPT0yVJr776qmpraw97/G+//VbffPONLr74Yj311FP6zW9+o3nz5mnMmDEqLy8/7Lbz58/XySefrOLiYt1111168MEHVVhYqFNPPVXLli077LbST4Fv/2BXW1urCRMmKCEhQY899pgmT558yO2vuuoq3XTTTUpNTdXDDz+s2267TcHBwVqyZIlvnQceeECXXnqpevXqpVmzZummm27SvHnzdPLJJ1s2MgcATWIAAJZ64YUXjCTz7bffHnKdqKgoM2zYMN/9u+66y+z/v/C//OUvRpLZvXv3Iffx7bffGknmhRdeOGDZKaecYiSZ55577qDLTjnlFN/9BQsWGEmmc+fOpri42Pf4G2+8YSSZJ5980vdYenq6ueyyy464z8PVdtlll5n09HTf/XfffddIMvfff3+D9S644AJjs9nMpk2bfI9JMi6Xq8Fj3333nZFknn766QOOtb8nnnjCSDKvvPKK77Hq6mozevRoEx4e3uC5p6enmzPPPPOw+zPGGK/X6/tZJyYmmksuucQ888wzZtu2bQesW15efsBjixcvNpLMSy+95Hus/vVYsGCB7xi9evUyEyZMMF6vt8H+unXrZk477TTfY/W/e59//rnZvXu32b59u3n99ddNXFycCQkJMTt27DDG1L0Gksxtt912QE0/f33mz59vJJkbb7zxoM/fGGO2bt1qHA6HeeCBBxos/+GHH4zT6TzgcQDwR4xIAUAACA8PP2z3vujoaEnSe++91+wT/91ut6644opGr3/ppZcqIiLCd/+CCy5QcnKyPv7442Ydv7E+/vhjORwO3XjjjQ0e//3vfy9jjObMmdPg8fHjx6tHjx6++4MHD1ZkZKQ2b958xOMkJSU1OEcoKChIN954o0pLS7Vw4cIm126z2fTpp5/q/vvvV0xMjF577TVdf/31Sk9P10UXXdRgJKb+fDhJqqmp0Z49e9SzZ09FR0dr5cqVhzzG6tWrtXHjRv3qV7/Snj17lJ+fr/z8fJWVlWncuHFatGjRAb8j48ePV6dOnZSamqqLL75Y4eHheuedd9S5c+cG61133XVHfI7/+9//ZLPZDtp4o3466ttvvy2v16sLL7zQV19+fr6SkpLUq1cvLViw4IjHAQCr0WwCAAJAaWmpEhISDrn8oosu0vPPP6+rr75at912m8aNG6fzzz9fF1xwgez2xn1m1rlz5yY1lujVq1eD+zabTT179mz0OTzNtW3bNqWkpDQIcVLdNLv65ftLS0s7YB8xMTHau3fvEY/Tq1evA35+hzpOY7ndbt1+++26/fbblZ2drYULF+rJJ5/UG2+8oaCgIN+5cBUVFZo5c6ZeeOEF7dy5s8H5X0VFRYfc/8aNGyVJl1122SHXKSoqUkxMjO/+M888o969e8vpdCoxMVF9+vQ54Hk7nU516dLliM8vMzNTKSkpio2NPWyNxpgDfofq0cACQCAgSAGAn9uxY4eKiorUs2fPQ64TEhKiRYsWacGCBfroo4/0ySef6L///a9OPfVUffbZZ3I4HEc8zv4jIC3lUBcN9ng8jaqpJRzqOOZnjSmskJycrIsvvliTJ0/WgAED9MYbb2j27NlyOp36v//7P73wwgu66aabNHr0aEVFRclms+niiy8+7Khj/bJHH330kG3uw8PDG9wfOXJkg46RB+N2uxsdyo/E6/XKZrNpzpw5B319fl4fAPgjghQA+LmXX35ZkjRhwoTDrme32zVu3DiNGzdOs2bN0oMPPqjbb79dCxYs0Pjx4w8ZapqrfuSjnjFGmzZtanC9q5iYmIM2Dti2bZu6d+/uu9+U2tLT0/X555+rpKSkwahU/cVs6xs6HK309HR9//338nq9DQJESx9HqhuBGTx4sDZu3Oib4vbWW2/psssu0+OPP+5br7Ky8oiNGOqnMUZGRmr8+PEtVmNj9ejRQ59++qkKCgoOOSrVo0cPGWPUrVs39e7du40rBICWwTlSAODH5s+fr/vuu0/dunXztZs+mIKCggMeqx+NqKqqkiSFhYVJUot1RHvppZcanLf11ltvKTs7W5MmTfI91qNHDy1ZskTV1dW+xz788MMDWlw3pbYzzjhDHo9Hf/3rXxs8/pe//EU2m63B8Y/GGWecoZycHP33v//1PVZbW6unn35a4eHhOuWUU5q8z40bNyorK+uAxwsLC7V48WLFxMT4Ov45HI4DRs2efvppeTyewx5jxIgR6tGjhx577DGVlpYesHz37t1NrrspJk+eLGOM7rnnngOW1T+f888/Xw6HQ/fcc88Bz9EYc8SOigDgDxiRAgA/MWfOHK1bt061tbXKzc3V/PnzNXfuXKWnp+v9999XcHDwIbe99957tWjRIp155plKT09XXl6e/va3v6lLly468cQTJdWFmujoaD333HOKiIhQWFiYRo0apW7dujWr3tjYWJ144om64oorlJubqyeeeEI9e/bUNddc41vn6quv1ltvvaWJEyfqwgsvVGZmpl555ZUGzR+aWtvZZ5+tsWPH6vbbb9fWrVs1ZMgQffbZZ3rvvfd00003HbDv5po2bZr+/ve/6/LLL9eKFSvUtWtXvfXWW/r666/1xBNPHHCOVmN89913+tWvfqVJkybppJNOUmxsrHbu3KkXX3xRu3bt0hNPPOGb6nbWWWfp5ZdfVlRUlPr376/Fixfr888/b9CS/GDsdruef/55TZo0SQMGDNAVV1yhzp07a+fOnVqwYIEiIyP1wQcfNOtn0hhjx47Vr3/9az311FPauHGjJk6cKK/Xqy+//FJjx47VDTfcoB49euj+++/XjBkztHXrVp133nmKiIjQli1b9M47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nnnmGXXt2lXBwcEaNWqUli1bZnVJfmvRokU6++yzlZKSIpvNpnfffbfBcmOM7rzzTiUnJyskJETjx4/Xxo0bG6xTUFCgKVOmKDIyUtHR0brqqqtUWlraYJ3vv/9eJ510koKDg5WamqpHHnnkgFrefPNN9e3bV8HBwRo0aJA+/vjjJtcSiGbOnKljjz1WERERSkhI0Hnnnaf169c3WKeyslLXX3+94uLiFB4ersmTJx9w0eqsrCydeeaZCg0NVUJCgm655RbV1tY2WOeLL77Q8OHD5Xa71bNnT82ePfuAeo7099OYWgLRs88+q8GDB/suiDh69GjNmTPHt5zXwBoPPfSQbDabbrrpJt9jvBat7+6775bNZmtw69u3r285r0Hb2Llzp6ZOnaq4uDiFhIRo0KBBWr58uW85/0a3vq5dux7wt2Cz2XT99ddL4m+h3TEd3Ouvv25cLpf597//bdauXWuuueYaEx0dbXJzc60uzS99/PHH5vbbbzdvv/22kWTeeeedBssfeughExUVZd59913z3XffmXPOOcd069bNVFRU+NaZOHGiGTJkiFmyZIn58ssvTc+ePc0ll1ziW15UVGQSExPNlClTzJo1a8xrr71mQkJCzN///nffOl9//bVxOBzmkUceMT/++KP585//bIKCgswPP/zQpFoC0YQJE8wLL7xg1qxZY1avXm3OOOMMk5aWZkpLS33r/OY3vzGpqalm3rx5Zvny5ea4444zxx9/vG95bW2tGThwoBk/frxZtWqV+fjjj018fLyZMWOGb53Nmzeb0NBQM336dPPjjz+ap59+2jgcDvPJJ5/41mnM38+RaglU77//vvnoo4/Mhg0bzPr1682f/vQnExQUZNasWWOM4TWwwrJly0zXrl3N4MGDze9+9zvf47wWre+uu+4yAwYMMNnZ2b7b7t27fct5DVpfQUGBSU9PN5dffrlZunSp2bx5s/n000/Npk2bfOvwb3Try8vLa/B3MHfuXCPJLFiwwBjD30J70+GD1MiRI83111/vu+/xeExKSoqZOXOmhVUFhp8HKa/Xa5KSksyjjz7qe6ywsNC43W7z2muvGWOM+fHHH40k8+233/rWmTNnjrHZbGbnzp3GGGP+9re/mZiYGFNVVeVb59ZbbzV9+vTx3b/wwgvNmWee2aCeUaNGmWuvvbbRtbQXeXl5RpJZuHChMabueQYFBZk333zTt05GRoaRZBYvXmyMqQvEdrvd5OTk+NZ59tlnTWRkpO/n/sc//tEMGDCgwbEuuugiM2HCBN/9I/39NKaW9iQmJsY8//zzvAYWKCkpMb169TJz5841p5xyii9I8Vq0jbvuussMGTLkoMt4DdrGrbfeak488cRDLuffaGv87ne/Mz169DBer5e/hXaoQ0/tq66u1ooVKzR+/HjfY3a7XePHj9fixYstrCwwbdmyRTk5OQ1+nlFRURo1apTv57l48WJFR0frmGOO8a0zfvx42e12LV261LfOySefLJfL5VtnwoQJWr9+vfbu3etbZ//j1K9Tf5zG1NJeFBUVSZJiY2MlSStWrFBNTU2D5963b1+lpaU1eB0GDRrU4KLVEyZMUHFxsdauXetb53A/48b8/TSmlvbA4/Ho9ddfV1lZmUaPHs1rYIHrr79eZ5555gE/L16LtrNx40alpKSoe/fumjJlirKysiTxGrSV999/X8ccc4x++ctfKiEhQcOGDdM///lP33L+jW571dXVeuWVV3TllVfKZrPxt9AOdegglZ+fL4/H0+CXVZISExOVk5NjUVWBq/5ndrifZ05OjhISEhosdzqdio2NbbDOwfax/zEOtc7+y49US3vg9Xp100036YQTTtDAgQMl1T13l8ul6OjoBuv+/OfT3J9xcXGxKioqGvX305haAtkPP/yg8PBwud1u/eY3v9E777yj/v378xq0sddff10rV67UzJkzD1jGa9E2Ro0apdmzZ+uTTz7Rs88+qy1btuikk05SSUkJr0Eb2bx5s5599ln16tVLn376qa677jrdeOONevHFFyXxb7QV3n33XRUWFuryyy+XxP+P2iOn1QUAaL7rr79ea9as0VdffWV1KR1Snz59tHr1ahUVFemtt97SZZddpoULF1pdVoeyfft2/e53v9PcuXMVHBxsdTkd1qRJk3zfDx48WKNGjVJ6erreeOMNhYSEWFhZx+H1enXMMcfowQcflCQNGzZMa9as0XPPPafLLrvM4uo6pn/961+aNGmSUlJSrC4FraRDj0jFx8fL4XAc0KEkNzdXSUlJFlUVuOp/Zof7eSYlJSkvL6/B8traWhUUFDRY52D72P8Yh1pn/+VHqiXQ3XDDDfrwww+1YMECdenSxfd4UlKSqqurVVhY2GD9n/98mvszjoyMVEhISKP+fhpTSyBzuVzq2bOnRowYoZkzZ2rIkCF68skneQ3a0IoVK5SXl6fhw4fL6XTK6XRq4cKFeuqpp+R0OpWYmMhrYYHo6Gj17t1bmzZt4u+hjSQnJ6t///4NHuvXr59viiX/Rretbdu26fPPP9fVV1/te4y/hfanQwcpl8ulESNGaN68eb7HvF6v5s2bp9GjR1tYWWDq1q2bkpKSGvw8i4uLtXTpUt/Pc/To0SosLNSKFSt868yfP19er1ejRo3yrbNo0SLV1NT41pk7d6769OmjmJgY3zr7H6d+nfrjNKaWQGWM0Q033KB33nlH8+fPV7du3RosHzFihIKCgho89/Xr1ysrK6vB6/DDDz80+Adz7ty5ioyM9P1DfKSfcWP+fhpTS3vi9XpVVVXFa9CGxo0bpx9++EGrV6/23Y455hhNmTLF9z2vRdsrLS1VZmamkpOT+XtoIyeccMIBl8LYsGGD0tPTJfFvdFt74YUXlJCQoDPPPNP3GH8L7ZDV3S6s9vrrrxu3221mz55tfvzxRzNt2jQTHR3doFsKflJSUmJWrVplVq1aZSSZWbNmmVWrVplt27YZY+ramUZHR5v33nvPfP/99+bcc889aGvVYcOGmaVLl5qvvvrK9OrVq0Fr1cLCQpOYmGh+/etfmzVr1pjXX3/dhIaGHtBa1el0mscee8xkZGSYu+6666CtVY9USyC67rrrTFRUlPniiy8atFgtLy/3rfOb3/zGpKWlmfnz55vly5eb0aNHm9GjR/uW17dXPf30083q1avNJ598Yjp16nTQ9qq33HKLycjIMM8888xB26se6e/nSLUEqttuu80sXLjQbNmyxXz//ffmtttuMzabzXz22WfGGF4DK+3ftc8YXou28Pvf/9588cUXZsuWLebrr78248ePN/Hx8SYvL88Yw2vQFpYtW2acTqd54IEHzMaNG82rr75qQkNDzSuvvOJbh3+j24bH4zFpaWnm1ltvPWAZfwvtS4cPUsYY8/TTT5u0tDTjcrnMyJEjzZIlS6wuyW8tWLDASDrgdtlllxlj6lqa3nHHHSYxMdG43W4zbtw4s379+gb72LNnj7nkkktMeHi4iYyMNFdccYUpKSlpsM53331nTjzxRON2u03nzp3NQw89dEAtb7zxhundu7dxuVxmwIAB5qOPPmqwvDG1BKKD/fwlmRdeeMG3TkVFhfntb39rYmJiTGhoqPnFL35hsrOzG+xn69atZtKkSSYkJMTEx8eb3//+96ampqbBOgsWLDBDhw41LpfLdO/evcEx6h3p76cxtQSiK6+80qSnpxuXy2U6depkxo0b5wtRxvAaWOnnQYrXovVddNFFJjk52bhcLtO5c2dz0UUXNbh+Ea9B2/jggw/MwIEDjdvtNn379jX/+Mc/Gizn3+i28emnnxpJB30+/C20LzZjjLFkKAwAAAAAAlSHPkcKAAAAAJqDIAUAAAAATUSQAgAAAIAmIkgBAAAAQBMRpAAAAACgiQhSAAAAANBEBCkAAAAAaCKCFAAAAAA0EUEKANDuzJ49W9HR0a1+nK1bt8pms2n16tWtfiwAgH8hSAEA/M7u3bt13XXXKS0tTW63W0lJSZowYYK+/vrrVjtm165dZbPZZLPZFBYWpuHDh+vNN9887DapqanKzs7WwIEDW60uAIB/IkgBAPzO5MmTtWrVKr344ovasGGD3n//fY0ZM0Z79uxp1ePee++9ys7O1qpVq3Tsscfqoosu0jfffHPQdaurq+VwOJSUlCSn09mqdQEA/A9BCgDgVwoLC/Xll1/q4Ycf1tixY5Wenq6RI0dqxowZOueccyRJs2bN0qBBgxQWFqbU1FT99re/VWlp6WH3+95772n48OEKDg5W9+7ddc8996i2trbBOhEREUpKSlLv3r31zDPPKCQkRB988IGkuhGr++67T5deeqkiIyM1bdq0g07tW7t2rc466yxFRkYqIiJCJ510kjIzM33Ln3/+efXr10/BwcHq27ev/va3v7XQTw4A0JYIUgAAvxIeHq7w8HC9++67qqqqOug6drtdTz31lNauXasXX3xR8+fP1x//+MdD7vPLL7/UpZdeqt/97nf68ccf9fe//12zZ8/WAw88cMhtnE6ngoKCVF1d7Xvsscce05AhQ7Rq1SrdcccdB2yzc+dOnXzyyXK73Zo/f75WrFihK6+80hfYXn31Vd1555164IEHlJGRoQcffFB33HGHXnzxxcb+eAAA/sIAAOBn3nrrLRMTE2OCg4PN8ccfb2bMmGG+++67Q67/5ptvmri4ON/9F154wURFRfnujxs3zjz44IMNtnn55ZdNcnKy7356err5y1/+Yowxpqqqyjz44INGkvnwww99y88777wG+9iyZYuRZFatWmWMMWbGjBmmW7duprq6+qB19ujRw/znP/9p8Nh9991nRo8efcjnBgDwTzZjjLE6zAEA8HOVlZX68ssvtWTJEs2ZM0fLli3T888/r8svv1yff/65Zs6cqXXr1qm4uFi1tbWqrKxUWVmZQkNDNXv2bN10000qLCyUJHXq1EmlpaVyOBy+/Xs8ngbbdO3aVdnZ2QoKClJlZaXCw8M1Y8YM3XrrrZLqpvZdc801uv3223372Lp1q7p166ZVq1Zp6NChOuOMM9SpU6eDjjCVlZUpPDxcISEhstt/mhBSW1urqKgo5ebmttJPEgDQGjg7FgDgl4KDg3XaaafptNNO0x133KGrr75ad911l8aMGaOzzjpL1113nR544AHFxsbqq6++0lVXXaXq6mqFhoYesK/S0lLdc889Ov/88w96nHq33HKLLr/8coWHhysxMVE2m63BumFhYYetOSQk5JDL6s/h+uc//6lRo0Y1WLZ/wAMABAaCFAAgIPTv31/vvvuuVqxYIa/Xq8cff9w3svPGG28cdtvhw4dr/fr16tmz52HXi4+PP+I6hzN48GC9+OKLqqmpUVBQUINliYmJSklJ0ebNmzVlypRmHwMA4B8IUgAAv7Jnzx798pe/1JVXXqnBgwcrIiJCy5cv1yOPPKJzzz1XPXv2VE1NjZ5++mmdffbZ+vrrr/Xcc88ddp933nmnzjrrLKWlpemCCy6Q3W7Xd999pzVr1uj+++9vsdpvuOEGPf3007r44os1Y8YMRUVFacmSJRo5cqT69Omje+65RzfeeKOioqI0ceJEVVVVafny5dq7d6+mT5/eYnUAAFofXfsAAH4lPDxco0aN0l/+8hedfPLJGjhwoO644w5dc801+utf/6ohQ4Zo1qxZevjhhzVw4EC9+uqrmjlz5mH3OWHC/7dzxyYWgkEURm8PFiAWYPQQzP5wG7EfC1DQIowMrMoCNtt84G12TgWTflyYn1zXlfu+M01T5nnOuq7p+/6rt3ddl+d58r5vWmv5fD7Ztu1vnVqWJfu+5ziOjOOY1lrO88wwDF+9A4D/59kEAABAkUUKAACgSEgBAAAUCSkAAIAiIQUAAFAkpAAAAIqEFAAAQJGQAgAAKBJSAAAARUIKAACgSEgBAAAUCSkAAICiX4zqesvmHZcFAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot SalePrice distribution\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.histplot(y_train, kde=True)\n",
        "plt.title('Distribution of SalePrice')\n",
        "plt.xlabel('SalePrice')\n",
        "plt.ylabel('Density')\n",
        "plt.savefig('saleprice_distribution.png')\n",
        "plt.show()\n",
        "\n",
        "# Correlation heatmap for key features\n",
        "key_features = ['OverallQual', 'GrLivArea', 'TotalBsmtSF', '1stFlrSF', 'GarageCars',\n",
        "                'GarageArea', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt', 'SalePrice']\n",
        "corr_matrix = train_data[key_features].corr()\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')\n",
        "plt.title('Correlation Heatmap of Key Features')\n",
        "plt.savefig('correlation_heatmap.png')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tn53K6CgCHBY"
      },
      "source": [
        "# Step 6: Split Data\n",
        "Split the combined dataset back into training and test sets based on the original sizes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LKOA0q3jBwX4",
        "outputId": "c87db206-a8e1-4ccb-8ec8-3dfa8d8e420c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (1460, 85)\n",
            "X_test shape: (1459, 85)\n"
          ]
        }
      ],
      "source": [
        "# Split data back into train and test\n",
        "X_train = all_data.iloc[:train_data.shape[0], :]\n",
        "X_test = all_data.iloc[train_data.shape[0]:, :]\n",
        "\n",
        "print(\"X_train shape:\", X_train.shape)\n",
        "print(\"X_test shape:\", X_test.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dWh_irRhCOQR"
      },
      "source": [
        "# Step 7: Model Training and Hyperparameter Tuning\n",
        "Train Linear Regression (Ridge), Random Forest, and Decision Tree models. Tune hyperparameters using cross-validation and visualize CV RMSE for Random Forest and Decision Tree."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "GnpWpHp_CQ9j",
        "outputId": "08e86bff-d01f-48ae-b4c2-eca612e30211"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-e4ddb16b18a4>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m             \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel__max_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparam\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'neg_mean_squared_error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m         \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                     )\n\u001b[1;32m    215\u001b[0m                 ):\n\u001b[0;32m--> 216\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_val_score\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, params, pre_dispatch, error_score)\u001b[0m\n\u001b[1;32m    682\u001b[0m     \u001b[0mscorer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_scoring\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscoring\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    683\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 684\u001b[0;31m     cv_results = cross_validate(\n\u001b[0m\u001b[1;32m    685\u001b[0m         \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    686\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                     )\n\u001b[1;32m    215\u001b[0m                 ):\n\u001b[0;32m--> 216\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36mcross_validate\u001b[0;34m(estimator, X, y, groups, scoring, cv, n_jobs, verbose, params, pre_dispatch, return_train_score, return_estimator, return_indices, error_score)\u001b[0m\n\u001b[1;32m    409\u001b[0m     \u001b[0;31m# independent, and that it is pickle-able.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m     \u001b[0mparallel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mParallel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpre_dispatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpre_dispatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 411\u001b[0;31m     results = parallel(\n\u001b[0m\u001b[1;32m    412\u001b[0m         delayed(_fit_and_score)(\n\u001b[1;32m    413\u001b[0m             \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     75\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         )\n\u001b[0;32m---> 77\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1983\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1984\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1985\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1986\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1987\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1911\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1912\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1913\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1914\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1915\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    137\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, score_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    864\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    865\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 866\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    867\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    868\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **params)\u001b[0m\n\u001b[1;32m    660\u001b[0m                     \u001b[0mall_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    661\u001b[0m                 )\n\u001b[0;32m--> 662\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mlast_step_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"fit\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    663\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    664\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    485\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    486\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 487\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    488\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     75\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         )\n\u001b[0;32m---> 77\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1983\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1984\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1985\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1986\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1987\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1911\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1912\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1913\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1914\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1915\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    137\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    187\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 189\u001b[0;31m         tree._fit(\n\u001b[0m\u001b[1;32m    190\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, sample_weight, check_input, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    470\u001b[0m             )\n\u001b[1;32m    471\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmissing_values_in_feature_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "# Define models\n",
        "models = {\n",
        "    'Linear Regression': Ridge(),\n",
        "    'Random Forest': RandomForestRegressor(random_state=42),\n",
        "    'Decision Tree': DecisionTreeRegressor(random_state=42)\n",
        "}\n",
        "\n",
        "# Hyperparameter grids\n",
        "param_grids = {\n",
        "      'Linear Regression': {'alpha': np.logspace(-1, 1, 50)},\n",
        "      'Random Forest': {'n_estimators': [50, 100, 150, 200], 'max_features': [0.3, 0.5, 'sqrt']},\n",
        "      'Decision Tree': {'max_depth': [5, 10, 15, 20, None]}\n",
        "}\n",
        "\n",
        "# Store results\n",
        "results = {}\n",
        "cv_scores = {}\n",
        "\n",
        "# Train and evaluate each model\n",
        "for name, model in models.items():\n",
        "\n",
        "# Create pipeline\n",
        "  pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])\n",
        "\n",
        "# Perform cross-validation\n",
        "  scores = cross_val_score(pipeline, X_train, y_train, cv=10, scoring='neg_mean_squared_error')\n",
        "  cv_scores[name] = np.sqrt(-scores).mean()  # RMSE\n",
        "\n",
        "# Fit model on full training data\n",
        "  pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Predict on training data\n",
        "  y_pred = pipeline.predict(X_train)\n",
        "  mse = mean_squared_error(y_train, y_pred)\n",
        "  results[name] = {'MSE': mse, 'RMSE': np.sqrt(mse)}\n",
        "\n",
        "# Visualize parameter tuning for Random Forest and Decision Tree\n",
        "  if name in ['Random Forest', 'Decision Tree']:\n",
        "     param_name = 'n_estimators' if name == 'Random Forest' else 'max_depth'\n",
        "     param_values = param_grids[name][param_name]\n",
        "     errors = []\n",
        "     for param in param_values:\n",
        "        if name == 'Random Forest':\n",
        "            pipeline.set_params(model__n_estimators=param)\n",
        "        else:\n",
        "            pipeline.set_params(model__max_depth=param)\n",
        "        scores = cross_val_score(pipeline, X_train, y_train, cv=10, scoring='neg_mean_squared_error')\n",
        "        errors.append(np.sqrt(-scores).mean())\n",
        "\n",
        "     plt.figure(figsize=(10, 6))\n",
        "     plt.plot(param_values, errors, marker='o')\n",
        "     plt.title(f'{name}: {param_name} vs CV RMSE')\n",
        "     plt.xlabel(param_name)\n",
        "     plt.ylabel('Cross-Validation RMSE')\n",
        "     plt.savefig(f'{name.lower().replace(\" \", \"_\")}_cv_error.png')\n",
        "     plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hRFeUR45CWFM"
      },
      "source": [
        "# Step 8: Model Evaluation\n",
        "Compare the performance of all models using MSE, RMSE, and CV RMSE metrics."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nDau9e8pCZeW"
      },
      "outputs": [],
      "source": [
        "# Print model performance\n",
        "print(\"Model Performance Comparison:\")\n",
        "for name, metrics in results.items():\n",
        "    print(f\"{name}: MSE = {metrics['MSE']:.4f}, RMSE = {metrics['RMSE']:.4f}, CV RMSE = {cv_scores[name]:.4f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JJbWf3cYCcb7"
      },
      "source": [
        "# Step 9: Feature Importance (Random Forest)\n",
        "Extract and visualize feature importance from the Random Forest model to identify key predictors."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bxLSkhMECfH2"
      },
      "outputs": [],
      "source": [
        "# Refit Random Forest for feature importance\n",
        "rf_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', RandomForestRegressor(n_estimators=150, max_features=0.3, random_state=42))])\n",
        "rf_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Get feature names\n",
        "num_features = numerical_cols\n",
        "cat_features = preprocessor.named_transformers_['cat']['onehot'].get_feature_names_out(categorical_cols)\n",
        "all_features = num_features + list(cat_features)\n",
        "\n",
        "# Get feature importance\n",
        "importances = rf_pipeline.named_steps['model'].feature_importances_\n",
        "feature_importance = pd.DataFrame({'Feature': all_features, 'Importance': importances})\n",
        "feature_importance = feature_importance.sort_values(by='Importance', ascending=False).head(10)\n",
        "\n",
        "# Plot feature importance\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Importance', y='Feature', data=feature_importance)\n",
        "plt.title('Top 10 Feature Importance (Random Forest)')\n",
        "plt.savefig('feature_importance.png')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BPIbdKWjColB"
      },
      "source": [
        "# Step 10: Generate Predictions\n",
        "Use the Random Forest model to predict test set prices and save results for Kaggle submission."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N3hPgj_8Cv3t"
      },
      "outputs": [],
      "source": [
        "# Predict using Random Forest\n",
        "test_predictions = rf_pipeline.predict(X_test)\n",
        "submission = pd.DataFrame({'Id': test_data['Id'], 'SalePrice': test_predictions})\n",
        "submission.to_csv('submission.csv', index=False)\n",
        "print(\"Predictions saved to 'submission.csv'\")"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}